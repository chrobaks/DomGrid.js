diff a/src/service/DomGrid.js b/src/service/DomGrid.js	(rejected hunks)
@@ -1,7 +1,7 @@
-class DomGrid
-{
-    constructor (config)
-    {
+import "../../style/index.scss"; // TODO auflÃ¶sen!
+
+export class DomGrid {
+    constructor(config) {
         this.config = config;
         this.container = document.getElementById(config.containerId);
         this.nameSpaces = [];
@@ -11,11 +11,12 @@
         this.error = [];
 
         // Load required js
-        if (this.initScriptLoader()) {this.loadScript(0);}
+        if (this.initScriptLoader()) {
+            this.loadScript(0);
+        }
     }
 
-    initScriptLoader ()
-    {
+    initScriptLoader() {
         const list = [...this.container.querySelectorAll("[data-grid-component]"), ...this.container.querySelectorAll("[data-grid-element]")];
         const listRequired = [...this.container.querySelectorAll("[data-grid-required]")];
 
@@ -24,7 +25,9 @@
 
                 const scriptName = "component/" + GridUi.dataSetValue(obj, "gridRequired");
 
-                if (!this.registeredScripts.includes(scriptName)) { this.registeredScripts.push(scriptName); }
+                if (!this.registeredScripts.includes(scriptName)) {
+                    this.registeredScripts.push(scriptName);
+                }
             });
         }
 
@@ -33,57 +36,58 @@
                 ? "component/" + GridUi.dataSetValue(obj, "gridComponent")
                 : "element/" + GridUi.dataSetValue(obj, "gridElement");
 
-            if (!this.registeredScripts.includes(scriptName)) { this.registeredScripts.push(scriptName);}
-            
+            if (!this.registeredScripts.includes(scriptName)) {
+                this.registeredScripts.push(scriptName);
+            }
+
         });
 
         return !!(this.registeredScripts.length);
     }
 
-    initNameSpaces ()
-    {
+    initNameSpaces() {
         const list = document.querySelectorAll("[data-grid-name-space]");
 
         if (list.length) {
-            [...list].map((obj) => { this.nameSpaces[obj.dataset.gridNameSpace] = {components : this.initComponents(obj)}; });
+            [...list].map((obj) => {
+                this.nameSpaces[obj.dataset.gridNameSpace] = {components: this.initComponents(obj)};
+            });
         }
     }
 
-    initComponents (space)
-    {
-        
-        const list = (GridUi.dataSetValue(space, "gridComponent") === "" ) ? space.querySelectorAll("[data-grid-component]") : [space];
+    initComponents(space) {
+
+        const list = (GridUi.dataSetValue(space, "gridComponent") === "") ? space.querySelectorAll("[data-grid-component]") : [space];
         const result = [];
-        
+
         if (list.length) {
-            
-            [...list].map((obj) => { 
+
+            [...list].map((obj) => {
                 if (typeof eval(obj.dataset.gridComponent) !== undefined) {
 
                     const component = eval(obj.dataset.gridComponent);
                     const componentInstance = new component(obj, space.dataset.gridNameSpace);
                     const id = (GridUi.dataSetValue(obj, 'gridComponentId')) ? GridUi.dataSetValue(obj, 'gridComponentId') : obj.dataset.gridComponent;
-                    
+
                     result[id] = componentInstance;
 
                     if (obj.querySelectorAll("[data-grid-element]").length) {
-                        
-                        this.initElements (componentInstance, obj, space.dataset.gridNameSpace);
+
+                        this.initElements(componentInstance, obj, space.dataset.gridNameSpace);
                     }
                 }
             });
-        } 
+        }
 
         return result;
     }
 
-    initElements (componentInstance, component, parentNameSpace)
-    {
+    initElements(componentInstance, component, parentNameSpace) {
         // Element list with attribute data-grid-element
         const list = component.querySelectorAll("[data-grid-element]");
 
         if (list.length) {
-            [...list].map((obj) => { 
+            [...list].map((obj) => {
                 // Select closest component as parent component
                 const parent = GridUi.closest("[data-grid-component]", obj);
                 // If parent exists
@@ -92,22 +96,21 @@
                     if (typeof eval(obj.dataset.gridElement) !== 'undefined') {
                         // Create object instance
                         const element = eval(obj.dataset.gridElement);
-                        
-                        new element(obj, {componentInstance : componentInstance, nameSpace : parentNameSpace, componentId : component.dataset.gridComponent});
+
+                        new element(obj, {componentInstance: componentInstance, nameSpace: parentNameSpace, componentId: component.dataset.gridComponent});
                     }
                 }
             });
-        } 
+        }
     }
 
-    loadScript (scriptIndex)
-    {
+    loadScript(scriptIndex) {
         const script = document.createElement('script');
         const registeredScripts = this.registeredScripts;
         // Script onload event
         script.onload = function () {
             if (scriptIndex + 1 < registeredScripts.length) {
-                GridStage.loadScript(scriptIndex+1);
+                GridStage.loadScript(scriptIndex + 1);
             } else {
                 // If script loading went wrong
                 if (GridStage.error.length) {
@@ -117,23 +120,22 @@
                 }
             }
         };
-        
+
         script.onerror = function () {
             GridStage.setError("JS-Script kann nicht geladen werden: " + script.src);
         };
 
         script.src = this.config.scriptPath + this.registeredScripts[scriptIndex] + ".js?" + Date.now();
-        
+
         document.querySelector("head").appendChild(script);
     }
 
-    postRequest (request)
-    {
+    postRequest(request) {
         const xhttp = new XMLHttpRequest();
         const _this = this;
         xhttp.open("POST", request.url, true);
         xhttp.send(request.formData);
-        xhttp.onreadystatechange = function() {
+        xhttp.onreadystatechange = function () {
             if (this.readyState == 4 && this.status == 200) {
 
                 const responseData = JSON.parse(this.responseText);
@@ -147,13 +149,12 @@
         };
     }
 
-    tplRequest (request)
-    {
+    tplRequest(request) {
         const _this = this;
         const xhttp = new XMLHttpRequest();
 
         xhttp.open("GET", request.url, true);
-        xhttp.onreadystatechange = function() { 
+        xhttp.onreadystatechange = function () {
             if (this.readyState == 4 && this.status == 200) {
 
                 const status = GridUi.getJsonFromStr('status', this.responseText);
@@ -161,52 +162,48 @@
                 if (request.hasOwnProperty('response')) {
                     request.component[request.response](this.responseText);
                 }
-            } 
+            }
         };
-        
-        xhttp.send(); 
+
+        xhttp.send();
     }
 
-    setNameSpaceComponentAction (nameSpaceId, componentId, method)
-    {
+    setNameSpaceComponentAction(nameSpaceId, componentId, method) {
         if (this.nameSpaces.hasOwnProperty(nameSpaceId) && this.nameSpaces[nameSpaceId].components.hasOwnProperty(componentId)) {
 
             const component = this.nameSpaces[nameSpaceId].components[componentId];
 
-            if (typeof component[method] === 'function') { 
+            if (typeof component[method] === 'function') {
                 if (arguments.length > 3) {
                     component[method](arguments[3]);
                 } else {
                     component[method]();
-                } 
+                }
             }
         }
     }
 
-    setError (error)
-    {
+    setError(error) {
         this.error.push(error);
     }
 
-    getError ()
-    {
+    getError() {
         return this.error;
     }
 
-    getNameSpaceComponentAction (nameSpaceId, componentId, method)
-    {
+    getNameSpaceComponentAction(nameSpaceId, componentId, method) {
         let result = null;
 
         if (this.nameSpaces.hasOwnProperty(nameSpaceId) && this.nameSpaces[nameSpaceId].components.hasOwnProperty(componentId)) {
 
             const component = this.nameSpaces[nameSpaceId].components[componentId];
 
-            if (typeof component[method] === 'function') { 
+            if (typeof component[method] === 'function') {
                 if (arguments.length > 3) {
-                     result = component[method](arguments[3]);
+                    result = component[method](arguments[3]);
                 } else {
                     result = component[method]();
-                } 
+                }
             }
         }
 
